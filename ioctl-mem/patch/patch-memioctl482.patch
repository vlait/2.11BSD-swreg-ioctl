*** /mnt/src/sys/pdp/mem.c	Wed May 15 20:49:35 1996
--- /usr/src/sys/pdp/mem.c	Wed Nov 27 05:52:05 2024
***************
*** 11,17 ****
--- 11,21 ----
  #include "user.h"
  #include "conf.h"
  #include "uio.h"
+ #include "ioctl.h"
+ #include "iopage.h" /* for CSW */
  
+ #define SIMH_BORK YES
+ 
  /*
   * This routine is callable only from the high
   * kernel as it assumes normal mapping and doesn't
***************
*** 72,82 ****
--- 76,136 ----
  			c = MIN(iov->iov_len, sizeof (zero));
  			error = uiomove(zero, c, uio);
  			break;
+ /* minor device 4 is the DISPLAY/SWITCH register */
+                 case 4:
+ 		/*pidp11 simh will not allow byte sized access to CSW
+ 		 *this only to hopefully safely limit the access to reg addr 
+ 		 *a patch submitted by grandmaster JohnnyB is available in 
+ 		 *simh-classic current to fix this.. for now however- this
+ 		*/
+                         error = uiomove(CSW,iov->iov_len>=2?2:iov->iov_len,uio);
+                         break;
  		default:
  			return(EINVAL);
  		} /* switch */
  	} /* while */
  	return(error);
+ }
+ 
+ /* mem device ioctl */
+ mmioctl(dev, com, data, flag)
+         dev_t dev;
+         u_int com;
+         caddr_t data;
+         int flag;
+ {
+ 	int error;
+ 
+ 	if(minor(dev) != 4) 
+ 		return(ENODEV);
+ 	
+ 
+         switch (com) {
+         	case MIOCGCSW:
+ 	/* data buffer passed by the ioctl syscall already in seg6, 
+ 	 * don't remap anything... fmove used to avoid traps if CSW 
+ 	 * does not exist on the host.
+ 	*/
+ #ifdef SIMH_BORK
+ 			error = 0;
+ 			*data = *CSW;
+ #else
+ 			error = fmove(*KDSA6,*KDSD6,CSW,data,2);
+ #endif
+ 			return(error);
+         	case MIOCSCSW:
+ #ifdef SIMH_BORK
+ 			error = 0;
+ 			*CSW = *data;
+ #else
+ 			error = fmove(*KDSA6,*KDSD6,data,CSW,2);
+ #endif
+ 			return(error);
+ 
+         	default:
+                 	return (ENXIO);
+ 		}
+ 	return (0);
  }
  
  /*
*** /mnt/src/sys/pdp/conf.c	Fri Jan  9 01:21:03 2009
--- /usr/src/sys/pdp/conf.c	Wed Nov 20 01:40:54 2024
***************
*** 338,344 ****
  int	logopen(), logclose(), logread(), logioctl(), logselect();
  int	syopen(), syread(), sywrite(), syioctl(), syselect();
  
! int	mmrw();
  #define	mmselect	seltrue
  
  #include "ingres.h"
--- 338,344 ----
  int	logopen(), logclose(), logread(), logioctl(), logselect();
  int	syopen(), syread(), sywrite(), syioctl(), syselect();
  
! int	mmrw(),mmioctl();
  #define	mmselect	seltrue
  
  #include "ingres.h"
***************
*** 365,371 ****
  	nulldev,
  /* mem = 1 */
  	nulldev,	nulldev,	mmrw,		mmrw,
! 	nodev,		nulldev,	0,		mmselect,
  	nulldev,
  /* dz = 2 */
  	dzopen,		dzclose,	dzread,		dzwrite,
--- 365,371 ----
  	nulldev,
  /* mem = 1 */
  	nulldev,	nulldev,	mmrw,		mmrw,
! 	mmioctl,	nulldev,	0,		mmselect,
  	nulldev,
  /* dz = 2 */
  	dzopen,		dzclose,	dzread,		dzwrite,
*** /mnt/src/sys/h/ioctl.h	Sun Jan 12 17:03:33 2020
--- /usr/src/sys/h/ioctl.h	Wed Nov 27 03:31:54 2024
***************
*** 233,238 ****
--- 233,240 ----
  #define	FIOASYNC	_IOW('f', 125, int)	/* set/clear async i/o */
  #define	FIOSETOWN	_IOW('f', 124, int)	/* set owner */
  #define	FIOGETOWN	_IOR('f', 123, int)	/* get owner */
+ #define MIOCGCSW	_IOR('f', 122, int) 	/* get CSW val */
+ #define MIOCSCSW	_IOW('f', 121, int)	/* set CSW val */
  
  /* socket i/o controls */
  #define	SIOCSHIWAT	_IOW('s',  0, int)		/* set high watermark */
